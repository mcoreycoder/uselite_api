// let Mongoose = {
//     connections: [
//       NativeConnection {
//         base: [Circular],
//         collections: [Object],
//         models: [Object],
//         config: [Object],
//         replica: false,
//         options: null,
//         otherDbs: [],
//         relatedDbs: {},
//         states: [Object: null prototype],
//         _readyState: 1,
//         _closeCalled: false,
//         _hasOpened: true,
//         plugins: [],
//         id: 0,
//         _listening: false,
//         _connectionOptions: [Object],
//         '$dbName': 'USElite',
//         client: [MongoClient],
//         '$initialConnection': [Promise],
//         name: 'USElite',
//         host: 'cluster0-shard-00-00-u5uxw.mongodb.net',
//         port: 27017,
//         user: 'mcoreycoder',
//         pass: 'USELITE',
//         db: [Db]
//       }
//     ],
//     models: { Users: Model { Users }, Products: Model { Products } },
//     modelSchemas: {
//       Users: Schema {
//         obj: [Object],
//         paths: [Object],
//         aliases: {},
//         subpaths: [Object],
//         virtuals: [Object],
//         singleNestedPaths: {},
//         nested: {},
//         inherits: {},
//         callQueue: [],
//         _indexes: [],
//         methods: [Object],
//         methodOptions: {},
//         statics: {},
//         tree: [Object],
//         query: {},
//         childSchemas: [],
//         plugins: [Array],
//         '$id': 1,
//         s: [Object],
//         _userProvidedOptions: {},
//         options: [Object],
//         '$globalPluginsApplied': true,
//         _requiredpaths: [Array],
//         _indexedpaths: []
//       },
//       Products: Schema {
//         obj: [Object],
//         paths: [Object],
//         aliases: {},
//         subpaths: [Object],
//         virtuals: [Object],
//         singleNestedPaths: {},
//         nested: {},
//         inherits: {},
//         callQueue: [],
//         _indexes: [],
//         methods: {},
//         methodOptions: {},
//         statics: {},
//         tree: [Object],
//         query: {},
//         childSchemas: [],
//         plugins: [Array],
//         '$id': 2,
//         s: [Object],
//         _userProvidedOptions: {},
//         options: [Object],
//         '$globalPluginsApplied': true
//       }
//     },
//     options: { pluralization: true, [Symbol(mongoose:default)]: true },
//     _pluralize: [Function: pluralize],
//     Schema: [Function: Schema] {
//       reserved: [Object: null prototype] {
//         populated: 1,
//         remove: 1,
//         validate: 1,
//         toObject: 1,
//         schema: 1,
//         save: 1,
//         modelName: 1,
//         get: 1,
//         isNew: 1,
//         isModified: 1,
//         init: 1,
//         errors: 1,
//         db: 1,
//         collection: 1,
//         removeListener: 1,
//         listeners: 1,
//         once: 1,
//         on: 1,
//         emit: 1,
//         prototype: 1
//       },
//       Types: {
//         String: [Function],
//         Number: [Function],
//         Boolean: [Function],
//         DocumentArray: [Function],
//         Embedded: [Function: SingleNestedPath],
//         Array: [Function],
//         Buffer: [Function],
//         Date: [Function],
//         ObjectId: [Function],
//         Mixed: [Function],
//         Decimal: [Function],
//         Decimal128: [Function],
//         Map: [Function],
//         Oid: [Function],
//         Object: [Function],
//         Bool: [Function],
//         ObjectID: [Function]
//       },
//       ObjectId: [Function: ObjectId] {
//         schemaName: 'ObjectId',
//         defaultOptions: {},
//         get: [Function],
//         set: [Function: set],
//         _checkRequired: [Function],
//         _cast: [Function: castObjectId],
//         cast: [Function: cast],
//         checkRequired: [Function]
//       }
//     },
//     model: [Function],
//     plugins: [
//       [ [Function], [Object] ],
//       [ [Function], [Object] ],
//       [ [Function], [Object] ],
//       [ [Function], [Object] ]
//     ]
//   }